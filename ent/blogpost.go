// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/AdongoJr2/technoprise-backend/ent/blogpost"
)

// BlogPost is the model entity for the BlogPost schema.
type BlogPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt      string `json:"excerpt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldID:
			values[i] = new(sql.NullInt64)
		case blogpost.FieldTitle, blogpost.FieldSlug, blogpost.FieldContent, blogpost.FieldExcerpt:
			values[i] = new(sql.NullString)
		case blogpost.FieldCreateTime, blogpost.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogPost fields.
func (bp *BlogPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int(value.Int64)
		case blogpost.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bp.CreateTime = value.Time
			}
		case blogpost.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bp.UpdateTime = value.Time
			}
		case blogpost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bp.Title = value.String
			}
		case blogpost.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				bp.Slug = value.String
			}
		case blogpost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bp.Content = value.String
			}
		case blogpost.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				bp.Excerpt = value.String
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogPost.
// This includes values selected through modifiers, order, etc.
func (bp *BlogPost) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// Update returns a builder for updating this BlogPost.
// Note that you need to call BlogPost.Unwrap() before calling this method if this BlogPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BlogPost) Update() *BlogPostUpdateOne {
	return NewBlogPostClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BlogPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BlogPost) Unwrap() *BlogPost {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogPost is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BlogPost) String() string {
	var builder strings.Builder
	builder.WriteString("BlogPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("create_time=")
	builder.WriteString(bp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(bp.Title)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(bp.Slug)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(bp.Content)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(bp.Excerpt)
	builder.WriteByte(')')
	return builder.String()
}

// BlogPosts is a parsable slice of BlogPost.
type BlogPosts []*BlogPost
