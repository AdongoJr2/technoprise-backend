// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AdongoJr2/technoprise-backend/ent/blogpost"
)

// BlogPostCreate is the builder for creating a BlogPost entity.
type BlogPostCreate struct {
	config
	mutation *BlogPostMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (bpc *BlogPostCreate) SetCreateTime(t time.Time) *BlogPostCreate {
	bpc.mutation.SetCreateTime(t)
	return bpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableCreateTime(t *time.Time) *BlogPostCreate {
	if t != nil {
		bpc.SetCreateTime(*t)
	}
	return bpc
}

// SetUpdateTime sets the "update_time" field.
func (bpc *BlogPostCreate) SetUpdateTime(t time.Time) *BlogPostCreate {
	bpc.mutation.SetUpdateTime(t)
	return bpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableUpdateTime(t *time.Time) *BlogPostCreate {
	if t != nil {
		bpc.SetUpdateTime(*t)
	}
	return bpc
}

// SetTitle sets the "title" field.
func (bpc *BlogPostCreate) SetTitle(s string) *BlogPostCreate {
	bpc.mutation.SetTitle(s)
	return bpc
}

// SetSlug sets the "slug" field.
func (bpc *BlogPostCreate) SetSlug(s string) *BlogPostCreate {
	bpc.mutation.SetSlug(s)
	return bpc
}

// SetContent sets the "content" field.
func (bpc *BlogPostCreate) SetContent(s string) *BlogPostCreate {
	bpc.mutation.SetContent(s)
	return bpc
}

// SetExcerpt sets the "excerpt" field.
func (bpc *BlogPostCreate) SetExcerpt(s string) *BlogPostCreate {
	bpc.mutation.SetExcerpt(s)
	return bpc
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpc *BlogPostCreate) Mutation() *BlogPostMutation {
	return bpc.mutation
}

// Save creates the BlogPost in the database.
func (bpc *BlogPostCreate) Save(ctx context.Context) (*BlogPost, error) {
	bpc.defaults()
	return withHooks(ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BlogPostCreate) SaveX(ctx context.Context) *BlogPost {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BlogPostCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BlogPostCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BlogPostCreate) defaults() {
	if _, ok := bpc.mutation.CreateTime(); !ok {
		v := blogpost.DefaultCreateTime()
		bpc.mutation.SetCreateTime(v)
	}
	if _, ok := bpc.mutation.UpdateTime(); !ok {
		v := blogpost.DefaultUpdateTime()
		bpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BlogPostCreate) check() error {
	if _, ok := bpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BlogPost.create_time"`)}
	}
	if _, ok := bpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BlogPost.update_time"`)}
	}
	if _, ok := bpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlogPost.title"`)}
	}
	if v, ok := bpc.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "BlogPost.slug"`)}
	}
	if v, ok := bpc.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogPost.content"`)}
	}
	if v, ok := bpc.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Excerpt(); !ok {
		return &ValidationError{Name: "excerpt", err: errors.New(`ent: missing required field "BlogPost.excerpt"`)}
	}
	if v, ok := bpc.mutation.Excerpt(); ok {
		if err := blogpost.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "BlogPost.excerpt": %w`, err)}
		}
	}
	return nil
}

func (bpc *BlogPostCreate) sqlSave(ctx context.Context) (*BlogPost, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BlogPostCreate) createSpec() (*BlogPost, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogPost{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(blogpost.Table, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt))
	)
	if value, ok := bpc.mutation.CreateTime(); ok {
		_spec.SetField(blogpost.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bpc.mutation.UpdateTime(); ok {
		_spec.SetField(blogpost.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bpc.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bpc.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := bpc.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bpc.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
		_node.Excerpt = value
	}
	return _node, _spec
}

// BlogPostCreateBulk is the builder for creating many BlogPost entities in bulk.
type BlogPostCreateBulk struct {
	config
	err      error
	builders []*BlogPostCreate
}

// Save creates the BlogPost entities in the database.
func (bpcb *BlogPostCreateBulk) Save(ctx context.Context) ([]*BlogPost, error) {
	if bpcb.err != nil {
		return nil, bpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BlogPost, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) SaveX(ctx context.Context) []*BlogPost {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BlogPostCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
