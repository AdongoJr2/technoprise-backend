// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AdongoJr2/technoprise-backend/ent/blogpost"
	"github.com/AdongoJr2/technoprise-backend/ent/predicate"
)

// BlogPostUpdate is the builder for updating BlogPost entities.
type BlogPostUpdate struct {
	config
	hooks    []Hook
	mutation *BlogPostMutation
}

// Where appends a list predicates to the BlogPostUpdate builder.
func (bpu *BlogPostUpdate) Where(ps ...predicate.BlogPost) *BlogPostUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetUpdateTime sets the "update_time" field.
func (bpu *BlogPostUpdate) SetUpdateTime(t time.Time) *BlogPostUpdate {
	bpu.mutation.SetUpdateTime(t)
	return bpu
}

// SetTitle sets the "title" field.
func (bpu *BlogPostUpdate) SetTitle(s string) *BlogPostUpdate {
	bpu.mutation.SetTitle(s)
	return bpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableTitle(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetTitle(*s)
	}
	return bpu
}

// SetSlug sets the "slug" field.
func (bpu *BlogPostUpdate) SetSlug(s string) *BlogPostUpdate {
	bpu.mutation.SetSlug(s)
	return bpu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableSlug(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetSlug(*s)
	}
	return bpu
}

// SetContent sets the "content" field.
func (bpu *BlogPostUpdate) SetContent(s string) *BlogPostUpdate {
	bpu.mutation.SetContent(s)
	return bpu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableContent(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetContent(*s)
	}
	return bpu
}

// SetExcerpt sets the "excerpt" field.
func (bpu *BlogPostUpdate) SetExcerpt(s string) *BlogPostUpdate {
	bpu.mutation.SetExcerpt(s)
	return bpu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableExcerpt(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetExcerpt(*s)
	}
	return bpu
}

// SetImage sets the "image" field.
func (bpu *BlogPostUpdate) SetImage(s string) *BlogPostUpdate {
	bpu.mutation.SetImage(s)
	return bpu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableImage(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetImage(*s)
	}
	return bpu
}

// ClearImage clears the value of the "image" field.
func (bpu *BlogPostUpdate) ClearImage() *BlogPostUpdate {
	bpu.mutation.ClearImage()
	return bpu
}

// SetPublishedAt sets the "published_at" field.
func (bpu *BlogPostUpdate) SetPublishedAt(t time.Time) *BlogPostUpdate {
	bpu.mutation.SetPublishedAt(t)
	return bpu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillablePublishedAt(t *time.Time) *BlogPostUpdate {
	if t != nil {
		bpu.SetPublishedAt(*t)
	}
	return bpu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (bpu *BlogPostUpdate) ClearPublishedAt() *BlogPostUpdate {
	bpu.mutation.ClearPublishedAt()
	return bpu
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpu *BlogPostUpdate) Mutation() *BlogPostMutation {
	return bpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BlogPostUpdate) Save(ctx context.Context) (int, error) {
	bpu.defaults()
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BlogPostUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BlogPostUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BlogPostUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BlogPostUpdate) defaults() {
	if _, ok := bpu.mutation.UpdateTime(); !ok {
		v := blogpost.UpdateDefaultUpdateTime()
		bpu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpu *BlogPostUpdate) check() error {
	if v, ok := bpu.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Excerpt(); ok {
		if err := blogpost.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "BlogPost.excerpt": %w`, err)}
		}
	}
	return nil
}

func (bpu *BlogPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogpost.Table, blogpost.Columns, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.UpdateTime(); ok {
		_spec.SetField(blogpost.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bpu.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Image(); ok {
		_spec.SetField(blogpost.FieldImage, field.TypeString, value)
	}
	if bpu.mutation.ImageCleared() {
		_spec.ClearField(blogpost.FieldImage, field.TypeString)
	}
	if value, ok := bpu.mutation.PublishedAt(); ok {
		_spec.SetField(blogpost.FieldPublishedAt, field.TypeTime, value)
	}
	if bpu.mutation.PublishedAtCleared() {
		_spec.ClearField(blogpost.FieldPublishedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BlogPostUpdateOne is the builder for updating a single BlogPost entity.
type BlogPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogPostMutation
}

// SetUpdateTime sets the "update_time" field.
func (bpuo *BlogPostUpdateOne) SetUpdateTime(t time.Time) *BlogPostUpdateOne {
	bpuo.mutation.SetUpdateTime(t)
	return bpuo
}

// SetTitle sets the "title" field.
func (bpuo *BlogPostUpdateOne) SetTitle(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetTitle(s)
	return bpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableTitle(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetTitle(*s)
	}
	return bpuo
}

// SetSlug sets the "slug" field.
func (bpuo *BlogPostUpdateOne) SetSlug(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetSlug(s)
	return bpuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableSlug(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetSlug(*s)
	}
	return bpuo
}

// SetContent sets the "content" field.
func (bpuo *BlogPostUpdateOne) SetContent(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetContent(s)
	return bpuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableContent(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetContent(*s)
	}
	return bpuo
}

// SetExcerpt sets the "excerpt" field.
func (bpuo *BlogPostUpdateOne) SetExcerpt(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetExcerpt(s)
	return bpuo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableExcerpt(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetExcerpt(*s)
	}
	return bpuo
}

// SetImage sets the "image" field.
func (bpuo *BlogPostUpdateOne) SetImage(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetImage(s)
	return bpuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableImage(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetImage(*s)
	}
	return bpuo
}

// ClearImage clears the value of the "image" field.
func (bpuo *BlogPostUpdateOne) ClearImage() *BlogPostUpdateOne {
	bpuo.mutation.ClearImage()
	return bpuo
}

// SetPublishedAt sets the "published_at" field.
func (bpuo *BlogPostUpdateOne) SetPublishedAt(t time.Time) *BlogPostUpdateOne {
	bpuo.mutation.SetPublishedAt(t)
	return bpuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillablePublishedAt(t *time.Time) *BlogPostUpdateOne {
	if t != nil {
		bpuo.SetPublishedAt(*t)
	}
	return bpuo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (bpuo *BlogPostUpdateOne) ClearPublishedAt() *BlogPostUpdateOne {
	bpuo.mutation.ClearPublishedAt()
	return bpuo
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpuo *BlogPostUpdateOne) Mutation() *BlogPostMutation {
	return bpuo.mutation
}

// Where appends a list predicates to the BlogPostUpdate builder.
func (bpuo *BlogPostUpdateOne) Where(ps ...predicate.BlogPost) *BlogPostUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BlogPostUpdateOne) Select(field string, fields ...string) *BlogPostUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BlogPost entity.
func (bpuo *BlogPostUpdateOne) Save(ctx context.Context) (*BlogPost, error) {
	bpuo.defaults()
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) SaveX(ctx context.Context) *BlogPost {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BlogPostUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BlogPostUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdateTime(); !ok {
		v := blogpost.UpdateDefaultUpdateTime()
		bpuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpuo *BlogPostUpdateOne) check() error {
	if v, ok := bpuo.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Excerpt(); ok {
		if err := blogpost.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "BlogPost.excerpt": %w`, err)}
		}
	}
	return nil
}

func (bpuo *BlogPostUpdateOne) sqlSave(ctx context.Context) (_node *BlogPost, err error) {
	if err := bpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogpost.Table, blogpost.Columns, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeInt))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogpost.FieldID)
		for _, f := range fields {
			if !blogpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.UpdateTime(); ok {
		_spec.SetField(blogpost.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bpuo.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Image(); ok {
		_spec.SetField(blogpost.FieldImage, field.TypeString, value)
	}
	if bpuo.mutation.ImageCleared() {
		_spec.ClearField(blogpost.FieldImage, field.TypeString)
	}
	if value, ok := bpuo.mutation.PublishedAt(); ok {
		_spec.SetField(blogpost.FieldPublishedAt, field.TypeTime, value)
	}
	if bpuo.mutation.PublishedAtCleared() {
		_spec.ClearField(blogpost.FieldPublishedAt, field.TypeTime)
	}
	_node = &BlogPost{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}
