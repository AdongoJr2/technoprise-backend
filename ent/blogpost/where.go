// Code generated by ent, DO NOT EDIT.

package blogpost

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/AdongoJr2/technoprise-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSlug, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldContent, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldExcerpt, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldImage, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldPublishedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldSlug, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldContent, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldExcerpt, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldImage, v))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldPublishedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.NotPredicates(p))
}
